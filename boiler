


import { Component, ChangeDetectionStrategy } from '@angular/core';
import { FlatTreeControl } from '@angular/cdk/tree';
import { MatTreeFlattener, MatTreeFlatDataSource } from '@angular/material/tree';
import { MatDialog } from '@angular/material/dialog';
import { DialogViewComponent } from '../dialog-view/dialog-view.component';
import { DialogComponent } from '../dialog/dialog.component';
import { FoodNode, TREE_DATA } from '../data';
import { BehaviorSubject } from 'rxjs';
import { distinctUntilChanged } from 'rxjs/operators';

interface ExampleFlatNode {
  expandable: boolean;
  id: number;
  name: string;
  level: number;
  expanded: boolean;
  children?: ExampleFlatNode[];
}

@Component({
  selector: 'app-tree',
  templateUrl: './tree.component.html',
  styleUrls: ['./tree.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class TreeComponent {
  maxId: number;
  private _transformer = (node: FoodNode, level: number) => {
    return {
      level: level,
      expandable: !!node.children && node.children.length > 0,
      id: node.id,
      name: node.name,
      expanded: true
    };
  };

  treeControl = new FlatTreeControl<ExampleFlatNode>(
    node => node.level,
    node => node.expandable
  );

  treeFlattener = new MatTreeFlattener(
    this._transformer,
    node => node.level,
    node => node.expandable,
    node => node.children
  );

  
  dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);
 
  private _dataSourceSubject = new BehaviorSubject<FoodNode[]>([]);

  expandedNodes: { [nodeName: string]: boolean } = {};

  constructor(public dialog: MatDialog) {
    this.maxId = this.getMaxIdFromData(TREE_DATA);
    this.dataSource.data = TREE_DATA;

    this.dataSource.data = TREE_DATA;
    this._dataSourceSubject.pipe(distinctUntilChanged()).subscribe(data => {
      this.dataSource.data = data;
    });
  }

  hasChild = (_: number, node: ExampleFlatNode) => node.expandable;

  deleteNode(node: FoodNode) {
    const index = TREE_DATA.findIndex(item => item.id === node.id);
    if (index !== -1) {
      TREE_DATA.splice(index, 1);
      this.updateDataSource(TREE_DATA);
    } else {
      this.deleteChildNode(node.id);
    }
  }

  deleteChildNode(nodeId: number): boolean {
    let isDeleted = false;

    function deleteChildNodeRecursive(nodes: FoodNode[]): boolean {
      for (let i = 0; i < nodes.length; i++) {
        const node = nodes[i];
        if (node.children) {
          const childIndex = node.children.findIndex(child => child.id === nodeId);
          if (childIndex > -1) {
            node.children.splice(childIndex, 1);
            isDeleted = true;
            break;
          } else {
            isDeleted = deleteChildNodeRecursive(node.children);
            if (isDeleted) {
              break;
            }
          }
        }
      }
      return isDeleted;
    }

    isDeleted = deleteChildNodeRecursive(TREE_DATA);

    if (isDeleted && this.dataSource) {
      this.updateDataSource(TREE_DATA);
    }

    return isDeleted;
  }

  editNode(node: FoodNode, newName: string) {
    node.editing = true;

    const findNode = (nodes: FoodNode[]): FoodNode | null => {
      for (const n of nodes) {
        if (n === node) {
          n.name = newName;
          return n;
        }
        if (n.children) {
          const updatedChild = findNode(n.children);
          if (updatedChild) {
            return n;
          }
        }
      }
      return null;
    };

    const updatedNode = findNode(TREE_DATA);

    if (updatedNode) {
    }
  }

  saveEdit(node: FoodNode) {
    node.editing = false;
  }

  cancelEdit(node: FoodNode) {
    node.editing = false;
  }

  openAddNodeDialog(parentNode: any): void {
    const dialogRef = this.dialog.open(DialogViewComponent, {
      width: '250px',
      data: { parentNode }
    });

    dialogRef.afterClosed().subscribe(result => {
      if (result && parentNode) {
        const childNode: FoodNode = result;
        this.addChildNode(parentNode, childNode);
      }
    });
  }

  addChildNode(parentNodeId: number, childNode: FoodNode): boolean {
    let isAdded = false;

    const generateUniqueId = () => {
      return ++this.maxId;
    };

    function addChildNodeRecursive(nodes: FoodNode[]): boolean {
      for (const node of nodes) {
        if (node.id === parentNodeId) {
          if (!node.children) {
            node.children = [];
          }
          childNode.id = generateUniqueId();
          node.children.push(childNode);
          
          isAdded = true;
          break;
        } else if (node.children && addChildNodeRecursive(node.children)) {
          break;
        }
      }
      return isAdded;
    }

    isAdded = addChildNodeRecursive(TREE_DATA);

    if (isAdded && this.dataSource) {
      this.updateDataSource(TREE_DATA);
    }

    return isAdded;
  }

  getMaxIdFromData(data: FoodNode[]): number {
    let maxId = 0;
    data.forEach(node => {
      if (node.id > maxId) {
        maxId = node.id;
      }
      if (node.children) {
        const childMaxId = this.getMaxIdFromData(node.children);
        if (childMaxId > maxId) {
          maxId = childMaxId;
        }
      }
    });
    return maxId;
  }

  addParentNode(name: string) {
    const newNode: FoodNode = {
      id: ++this.maxId,
      name,
      children: []
    };
    TREE_DATA.push(newNode);
    this.updateDataSource(TREE_DATA);
  }

  openAddParentNodeDialog(): void {
    const dialogRef = this.dialog.open(DialogComponent, {
      width: '250px',
    });

    dialogRef.afterClosed().subscribe(result => {
      if (result) {
        this.addParentNode(result.name);
      }
    });
  }

  findNodeByName(name: string): FoodNode | null {
    function findNodeRecursive(nodes: FoodNode[]): FoodNode | null {
      for (const node of nodes) {
        if (node.name === name) {
          return node;
        }
        if (node.children) {
          const foundNode = findNodeRecursive(node.children);
          if (foundNode) {
            return foundNode;
          }
        }
      }
      return null;
    }

    return findNodeRecursive(TREE_DATA);
  }

  private updateDataSource(data: FoodNode[]): void {
    this._dataSourceSubject.next(data);
  }
  
}
